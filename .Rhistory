textInput("name", "Name:", placeholder = "Enter your name..."),
),
column(6,
textInput("email", "Email:", placeholder = "Enter your email..."),
),
),
fluidRow(
column(6,
textInput("phone", "Phone:", placeholder = "Enter your phone number..."),
),
column(6,
selectInput("state", "State:", choices = c(
"Alberta", "British Columbia", "Manitoba", "New Brunswick",
"Newfoundland and Labrador", "Nova Scotia", "Ontario",
"Prince Edward Island", "Quebec", "Saskatchewan",
"Northwest Territories", "Nunavut", "Yukon"
)),
),
),
fluidRow(
column(6,
radioButtons("position", "Job Position:", choices = c(
"Data Scientist", "Senior Software Engineer", "Data Engineer",
"UI/UX Developer", "Project Manager"
)),
),
column(6,
fileInput("resume", "Upload Resume:"),
),
),
fluidRow(
column(12,
textAreaInput(
"cover_letter",
"Cover Letter:",
rows = 6,
resize = "none",
placeholder = "Enter your cover letter..."
),
),
),
fluidRow(
column(12, align = "center",
actionButton(label = "Submit Application", inputId = "submit"),
),
),
),
),
)
# Define server
server <- function(input, output, session) {
# Create a new instance of the InputValidator class
iv <- InputValidator$new()
# Add validation rules for form inputs
iv$add_rule("name", sv_required())
iv$add_rule("email", sv_required())
iv$add_rule("email", sv_email())
iv$add_rule("phone", sv_required())
iv$add_rule("phone", sv_regex("^(\\+\\d{1,3}[- ]?)?\\d{10}$", "Invalid Phone number"))
iv$add_rule("resume", sv_required())
# Event handler for submit button click
observeEvent(input$submit, {
# Enable validation
iv$enable()
# Check if all form inputs are valid
req(iv$is_valid())
# Process the job application form data here (e.g., save to a database)
# Access the input values using input$name, input$email, etc.
# You can also access the uploaded resume using input$resume
# Show a success message in a modal dialog
showModal(modalDialog(
title = "Application Submitted",
"Thank you for submitting your application!",
footer = actionButton("dismiss_modal", label = "Done"),
easyClose = FALSE
))
})
# Event handler for dismissing the success modal dialog
observeEvent(input$dismiss_modal, {
# Reset the form by reloading the page after data is saved
session$reload()
})
}
# Run the application
shinyApp(ui, server)
pwd
gwd
getwd()
setwd(C:/Users/bhaga/Downloads/job-app)
setwd("C:/Users/bhaga/Downloads/job-app")
getwd()
# Load required packages
library(shiny)
library(shinyvalidate)
setwd("C:/Users/bhaga/Downloads/job-app")
getwd()
# Define UI
ui <- fluidPage(
# Define custom CSS styles
tags$style(
"body {
background: linear-gradient(180deg, #fff, #db182a);
min-height: 100vh
}
.container-fluid {
max-width: 1300px
}
.header {
color: #db182a;
display: flex;
align-items: center;
justify-content: center;
padding: 10px 0;
}
.header img {
margin-right: 10px;
}
.form-container {
background-color: #fff;
border-radius: 4px;
padding: 15px;
}
.form-container .form-group {
width: 100%;
}
"
),
fluidRow(
column(6, offset = 3,
tags$div(
class = "header",
img(src = "logo.png", width = "63px"),
titlePanel("Job Application Form"),
)
)
),
fluidRow(
column(6, offset = 3,
class = "form-container",
# Form inputs
fluidRow(
column(6,
textInput("name", "Name:", placeholder = "Enter your name..."),
),
column(6,
textInput("email", "Email:", placeholder = "Enter your email..."),
),
),
fluidRow(
column(6,
textInput("phone", "Phone:", placeholder = "Enter your phone number..."),
),
column(6,
selectInput("state", "State:", choices = c(
"Alberta", "British Columbia", "Manitoba", "New Brunswick",
"Newfoundland and Labrador", "Nova Scotia", "Ontario",
"Prince Edward Island", "Quebec", "Saskatchewan",
"Northwest Territories", "Nunavut", "Yukon"
)),
),
),
fluidRow(
column(6,
radioButtons("position", "Job Position:", choices = c(
"Data Scientist", "Senior Software Engineer", "Data Engineer",
"UI/UX Developer", "Project Manager"
)),
),
column(6,
fileInput("resume", "Upload Resume:"),
),
),
fluidRow(
column(12,
textAreaInput(
"cover_letter",
"Cover Letter:",
rows = 6,
resize = "none",
placeholder = "Enter your cover letter..."
),
),
),
fluidRow(
column(12, align = "center",
actionButton(label = "Submit Application", inputId = "submit"),
),
),
),
),
)
# Define server
server <- function(input, output, session) {
# Create a new instance of the InputValidator class
iv <- InputValidator$new()
# Add validation rules for form inputs
iv$add_rule("name", sv_required())
iv$add_rule("email", sv_required())
iv$add_rule("email", sv_email())
iv$add_rule("phone", sv_required())
iv$add_rule("phone", sv_regex("^(\\+\\d{1,3}[- ]?)?\\d{10}$", "Invalid Phone number"))
iv$add_rule("resume", sv_required())
# Event handler for submit button click
observeEvent(input$submit, {
# Enable validation
iv$enable()
# Check if all form inputs are valid
req(iv$is_valid())
# Process the job application form data here (e.g., save to a database)
# Access the input values using input$name, input$email, etc.
# You can also access the uploaded resume using input$resume
# Show a success message in a modal dialog
showModal(modalDialog(
title = "Application Submitted",
"Thank you for submitting your application!",
footer = actionButton("dismiss_modal", label = "Done"),
easyClose = FALSE
))
})
# Event handler for dismissing the success modal dialog
observeEvent(input$dismiss_modal, {
# Reset the form by reloading the page after data is saved
session$reload()
})
}
# Run the application
shinyApp(ui, server)
runApp('.', port = 7732)
shiny::runApp()
shiny::runApp()
# Create scatter plot with bubble size
ggplot(data, aes(x = data$`Marketing Spend`, y = data$Revenue, size = data$`New Expansion`)) +
geom_point() +
labs(x = "Marketing Spend", y = "Revenue", size = "New Expansion") +
ggtitle("Scatter Plot with Bubble Size")
# Create the lollipop chart
ggplot(data, aes(x = reorder(State,-Marketing.Spend) , y = Marketing.Spend)) +
geom_segment(aes(xend = State, yend = 0), color = "grey50") +
geom_point(size = 4, aes(color = Above.Average)) +
scale_color_manual(values = c("Above Average" = "steelblue", "Below Average" = "darkorange")) +
labs(x = "State", y = "Marketing Spend", color = "Marketing Spend") +
ggtitle("Lollipop Chart of Marketing Spend") +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "top")
library(ggplot2)
library(ggplot)
head(data)
ggplot(data, aes(x=data$`Sales Region`, y=mean(data$Revenue)) +  geom_bar(position="dodge", stat="identity"))
# Create the lollipop chart
ggplot(data, aes(x = reorder(State,-Marketing.Spend) , y = Marketing.Spend)) +
geom_segment(aes(xend = State, yend = 0), color = "grey50") +
geom_point(size = 4, aes(color = Above.Average)) +
scale_color_manual(values = c("Above Average" = "steelblue", "Below Average" = "darkorange")) +
labs(x = "State", y = "Marketing Spend", color = "Marketing Spend") +
ggtitle("Lollipop Chart of Marketing Spend") +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "top")
avg_marketing_spend <- mean(data$Marketing.Spend)
# Create a column to determine if Marketing Spend is above or below average
data$Above.Average <- ifelse(data$Marketing.Spend > avg_marketing_spend, "Above Average", "Below Average")
# Sort the data by Marketing Spend in descending order
data <- data[order(-data$Marketing.Spend), ]
# Create the lollipop chart
ggplot(data, aes(x = reorder(State,-Marketing.Spend) , y = Marketing.Spend)) +
geom_segment(aes(xend = State, yend = 0), color = "grey50") +
geom_point(size = 4, aes(color = Above.Average)) +
scale_color_manual(values = c("Above Average" = "steelblue", "Below Average" = "darkorange")) +
labs(x = "State", y = "Marketing Spend", color = "Marketing Spend") +
ggtitle("Lollipop Chart of Marketing Spend") +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "top")
# Create the lollipop chart
ggplot(data, aes(x = reorder(State,-Marketing.Spend) , y = Marketing.Spend)) +
geom_segment(aes(xend = State, yend = 0), color = "grey50") +
geom_point(size = 4, aes(color = Above.Average)) +
scale_color_manual(values = c("Above Average" = "steelblue", "Below Average" = "darkorange")) +
labs(x = "State", y = "Marketing Spend", color = "Marketing Spend") +
ggtitle("Lollipop Chart of Marketing Spend") +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "top")
avg_marketing_spend <- mean(data$Marketing.Spend)
# Calculate the correlation matrix
data$Marketing.Spend <- as.numeric(data$`Marketing Spend`)
head(data)
data = read_excel("C:/Users/bhaga/Downloads/P1-StartupExpansion.xlsx")
library(readxl)
data = read_excel("C:/Users/bhaga/Downloads/P1-StartupExpansion.xlsx")
head(data)
ggplot(data, aes(x=data$`Sales Region`, y=mean(data$Revenue)) +  geom_bar(position="dodge", stat="identity"))
data$avg_revenue <- mean(data$Revenue)
print(data$avg_revenue)
sumrev <- tapply(data$Revenue, data$`New Expansion`, sum)
barplot(sumrev)
ggplot(data, aes(x=data$`New Expansion`, y=data$Revenue, fill=data$`State`)) +
geom_bar(position="dodge", stat="identity")+
labs(title="Bill vs Payment Amount a month prior") +
xlab("Payment Amount") +
ylab("Bill Amount")
hist(data$'State')
avg_marketing_spend <- mean(data$Marketing.Spend)
# Create a column to determine if Marketing Spend is above or below average
data$Above.Average <- ifelse(data$Marketing.Spend > avg_marketing_spend, "Above Average", "Below Average")
# Sort the data by Marketing Spend in descending order
data <- data[order(-data$Marketing.Spend), ]
# Create the lollipop chart
ggplot(data, aes(x = reorder(State,-Marketing.Spend) , y = Marketing.Spend)) +
geom_segment(aes(xend = State, yend = 0), color = "grey50") +
geom_point(size = 4, aes(color = Above.Average)) +
scale_color_manual(values = c("Above Average" = "steelblue", "Below Average" = "darkorange")) +
labs(x = "State", y = "Marketing Spend", color = "Marketing Spend") +
ggtitle("Lollipop Chart of Marketing Spend") +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "top")
# Calculate the correlation matrix
data$Marketing.Spend <- as.numeric(data$`Marketing Spend`)
# Create the lollipop chart
ggplot(data, aes(x = reorder(State,-Marketing.Spend) , y = Marketing.Spend)) +
geom_segment(aes(xend = State, yend = 0), color = "grey50") +
geom_point(size = 4, aes(color = Above.Average)) +
scale_color_manual(values = c("Above Average" = "steelblue", "Below Average" = "darkorange")) +
labs(x = "State", y = "Marketing Spend", color = "Marketing Spend") +
ggtitle("Lollipop Chart of Marketing Spend") +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "top")
# Create a column to determine if Marketing Spend is above or below average
data$Above.Average <- ifelse(data$Marketing.Spend > avg_marketing_spend, "Above Average", "Below Average")
# Sort the data by Marketing Spend in descending order
data <- data[order(-data$Marketing.Spend), ]
# Create the lollipop chart
ggplot(data, aes(x = reorder(State,-Marketing.Spend) , y = Marketing.Spend)) +
geom_segment(aes(xend = State, yend = 0), color = "grey50") +
geom_point(size = 4, aes(color = Above.Average)) +
scale_color_manual(values = c("Above Average" = "steelblue", "Below Average" = "darkorange")) +
labs(x = "State", y = "Marketing Spend", color = "Marketing Spend") +
ggtitle("Lollipop Chart of Marketing Spend") +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "top")
# Create the lollipop chart
ggplot(data, aes(x = reorder(State,-Marketing.Spend) , y = Marketing.Spend)) +
geom_segment(aes(xend = State, yend = 0), color = "grey50") +
geom_point(size = 4, aes(color = Above.Average)) +
scale_color_manual(values = c("Above Average" = "steelblue", "Below Average" = "darkorange")) +
labs(x = "State", y = "Marketing Spend", color = "Marketing Spend") +
ggtitle("Lollipop Chart of Marketing Spend") +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "top")
# Create the lollipop chart
ggplot(data, aes(x = reorder(State,-Marketing.Spend) , y = Marketing.Spend)) +
geom_segment(aes(xend = State, yend = 0), color = "grey50") +
geom_point(size = 4, aes(color = Above.Average)) +
scale_color_manual(values = c("Above Average" = "steelblue", "Below Average" = "darkorange")) +
labs(x = "State", y = "Marketing Spend", color = "Marketing Spend") +
ggtitle("Lollipop Chart of Marketing Spend") +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "top")
# Sort the data by Marketing Spend in descending order
data <- data[order(-data$Marketing.Spend), ]
# Create the lollipop chart
ggplot(data, aes(x = reorder(State,-Marketing.Spend) , y = Marketing.Spend)) +
geom_segment(aes(xend = State, yend = 0), color = "grey50") +
geom_point(size = 4, aes(color = Above.Average)) +
scale_color_manual(values = c("Above Average" = "steelblue", "Below Average" = "darkorange")) +
labs(x = "State", y = "Marketing Spend", color = "Marketing Spend") +
ggtitle("Lollipop Chart of Marketing Spend") +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "top")
avg_marketing_spend <- mean(data$Marketing.Spend)
# Create a column to determine if Marketing Spend is above or below average
data$Above.Average <- ifelse(data$Marketing.Spend > avg_marketing_spend, "Above Average", "Below Average")
# Sort the data by Marketing Spend in descending order
data <- data[order(-data$Marketing.Spend), ]
# Create the lollipop chart
ggplot(data, aes(x = reorder(State,-Marketing.Spend) , y = Marketing.Spend)) +
geom_segment(aes(xend = State, yend = 0), color = "grey50") +
geom_point(size = 4, aes(color = Above.Average)) +
scale_color_manual(values = c("Above Average" = "steelblue", "Below Average" = "darkorange")) +
labs(x = "State", y = "Marketing Spend", color = "Marketing Spend") +
ggtitle("Lollipop Chart of Marketing Spend") +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "top")
# Create the lollipop chart
ggplot(data, aes(x = reorder(State,-Marketing.Spend) , y = Marketing.Spend)) +
geom_segment(aes(xend = State, yend = 0), color = "grey50") +
geom_point(size = 4, aes(color = Above.Average)) +
scale_color_manual(values = c("Above Average" = "steelblue", "Below Average" = "darkorange")) +
labs(x = "State", y = "Marketing Spend ($)", color = "Marketing Spend") +
ggtitle("Lollipop Chart of Marketing Spend") +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "top")
Housing_Price <- read.csv(file.choose(), header = TRUE)
Housing_Price <- read.csv(file.choose(), header = TRUE)
str(Housing_Price)
summary(Housing_Price)
colnames(Housing_Price)
# Check for missing values
colSums(is.na(Housing_Price))
# Handle missing values
Housing_Price <- na.omit(Housing_Price)
# Identify outliers in numeric variables using box plots
boxplot(Housing_Price$total_rooms)
boxplot(Housing_Price$total_bedrooms)
boxplot(Housing_Price$population)
boxplot(Housing_Price$households)
boxplot(Housing_Price$median_income)
boxplot(Housing_Price$median_house_value)
# Define a function to winsorize outliers based on MAD
winsorize <- function(x, coef = 3) {
mad <- median(abs(x - median(x, na.rm = TRUE, finite = TRUE)), na.rm = TRUE)
x <- ifelse(abs(x - median(x, na.rm = TRUE, finite = TRUE)) > coef * mad,
median(x, na.rm = TRUE, finite = TRUE) + coef * mad * sign(x - median(x, na.rm = TRUE, finite = TRUE)),
x)
x
}
# Apply winsorization to all columns except for categorical variables
numeric_columns <- sapply(Housing_Price, is.numeric)
numeric_columns[which(names(Housing_Price) == "ocean_proximity")] <- FALSE
Housing_Price[numeric_columns] <- lapply(Housing_Price[numeric_columns], winsorize)
# Check the results
summary(Housing_Price)
str(Housing_Price)
# Identify outliers in numeric variables using box plots
boxplot(Housing_Price$total_rooms)
boxplot(Housing_Price$total_bedrooms)
boxplot(Housing_Price$population)
boxplot(Housing_Price$households)
boxplot(Housing_Price$median_income)
boxplot(Housing_Price$median_house_value)
set.seed(123)  # Set a seed for reproducibility
train_idx <- sample(1:nrow(Housing_Price), 0.7 * nrow(Housing_Price))  # 70% for training
train_data <- Housing_Price[train_idx, ]
test_data <- Housing_Price[-train_idx, ]
library(tidyverse)
library(lmtest)
library(zoo)
model1 <- lm(median_house_value ~ ., data = Housing_Price)
summary(model1)
model2 <- lm(median_house_value ~., data = train_data, family = Housing_Price)
summary(model2)
model3 <- lm(median_house_value ~ longitude + latitude + housing_median_age + total_rooms + total_bedrooms + population + households + median_income , data = train_data)
summary(model3)
# Make predictions on the testing set using model 1
predictions <- predict(model3, newdata = test_data)
# Compare the predicted values with the actual values in the testing set
comparison <- data.frame(Actual = test_data$median_house_value, Predicted = predictions)
comparison
autoplot(model3)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autoplot(model3)
# Load required library
library(ggplot2)
# Generate random data
set.seed(123)
x <- rnorm(100)
y <- 2*x + rnorm(100)
# Fit simple regression model
model <- lm(y ~ x)
# Diagnostic plots
par(mfrow = c(2, 2))
plot(model)
# Generate random data
set.seed(123)
x1 <- rnorm(100)
x2 <- rnorm(100)
y <- 2*x1 + 3*x2 + rnorm(100)
# Create data frame
data <- data.frame(x1, x2, y)
# Fit multiple regression model
model <- lm(y ~ x1 + x2, data = data)
# Diagnostic plots
par(mfrow = c(2, 2))
plot(model)
data = read_csv("C:/Users/bhaga/Downloads/CarPrice_Assignment.csv")
data
set.seed(123)  # Set a seed for reproducibility
train_idx <- sample(1:nrow(data), 0.7 * nrow(Housing_Price))  # 70% for training
set.seed(123)  # Set a seed for reproducibility
train_idx <- sample(1:nrow(data), 0.7 * nrow(data))  # 70% for training
train_data <- data[train_idx, ]
test_data <- data[-train_idx, ]
model1 <- lm(price ~., train_data)
model1 <- lm(price ~., data)
summary(model1)
library(MASS)
df = Boston
summary(df)
write.csv("C:/Users/bhaga/OneDrive - Northeastern University/ALY 6050 (Wednesday)/NewYork House Price")
